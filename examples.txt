// gauss- uklad liniowy
#include "../naglowek.hpp"
#include <iostream>
#include <vector>

int main() {
    std::vector<double> A = {3, 2, -4, 2, 3, 3, 5, -3, 1};
    std::vector<double> b = {3, 15, 14};
    auto x = mynum::gauss(A, b, 3);

    std::cout << "Rozwiązanie układu równań:\n";
    for (size_t i = 0; i < x.size(); ++i)
        std::cout << "x" << i + 1 << " = " << x[i] << "\n";

    return 0;
}

// interpolacja lagrange
#include "../naglowek.hpp"
#include <iostream>
#include <vector>

int main() {
    std::vector<double> xi = {0, 1, 2};
    std::vector<double> fi = {1, 3, 2};
    double x = 1.5;
    double fx = mynum::lagrange(x, xi, fi);

    std::cout << "Interpolacja Lagrange’a:\n";
    std::cout << "f(" << x << ") = " << fx << "\n";

    return 0;
}

// obliczanie całek - simpson
#include "../naglowek.hpp"
#include <iostream>
#include <cmath>

int main() {
    auto f = [](double x) { return std::sin(x); };
    double integral = mynum::simpson(f, 0, M_PI, 200);

    std::cout << "Całkowanie funkcji sin(x) w przedziale [0, pi]:\n";
    std::cout << "Wynik przybliżony = " << integral << "\n";

    return 0;
}

// miejsca zerowe - bijeksja
#include "../naglowek.hpp"
#include <iostream>
#include <cmath>

int main() {
    auto f = [](double x) { return std::cos(x) - x; };
    int it;
    double root = mynum::bisection(f, 0, 1, 1e-8, 100, it);

    std::cout << "Pierwiastek równania cos(x) = x w przedziale [0,1]:\n";
    std::cout << "x = " << root << " (iteracje: " << it << ")\n";

    return 0;
}

//heun
#include "../naglowek.hpp"
#include <iostream>
#include <cmath>

int main() {
    auto f = [](double, double y) { return y; }; // y' = y
    auto ys = mynum::ode_heun(f, 0.0, 1.0, 0.1, 10);

    std::cout << "Rozwiązanie równania y' = y metodą Heuna:\n";
    for (size_t i = 0; i < ys.size(); ++i)
        std::cout << "y[" << i << "] = " << ys[i] << "\n";

    return 0;
}

